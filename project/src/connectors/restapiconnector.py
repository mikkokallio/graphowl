import requests
from connectors.connector import Connector

jsn={
"dataset": {
"version": "2.0",
"class": "dataset",
"label": "Koronarokotukset Suomessa",
"dimension": {
"id": [
"cov_vac_dose","measure","dateweek20201226","cov_vac_age"
],
"size": [
3,1,50,1
],
"cov_vac_dose" : {
"category": {
"index": {
"533170": 0,
"533164": 1,
"639082": 2
},
"label": {
"533170": "Ensimmäinen annos",
"533164": "Toinen annos",
"639082": "Kolmas annos"
}
}
},
"measure" : {
"category": {
"index": {
"533175": 0
},
"label": {
"533175": "Annettuja annoksia"
}
}
},
"dateweek20201226" : {
"category": {
"index": {
"525467": 0,
"525455": 1,
"525460": 2,
"525438": 3,
"525454": 4,
"525462": 5,
"525441": 6,
"527848": 7,
"531437": 8,
"533036": 9,
"533161": 10,
"533828": 11,
"533893": 12,
"537676": 13,
"539117": 14,
"547307": 15,
"547361": 16,
"547509": 17,
"547559": 18,
"566011": 19,
"567632": 20,
"568219": 21,
"580342": 22,
"580442": 23,
"581008": 24,
"581100": 25,
"590261": 26,
"600765": 27,
"601510": 28,
"601865": 29,
"601960": 30,
"601981": 31,
"602272": 32,
"602655": 33,
"610782": 34,
"610832": 35,
"617752": 36,
"618236": 37,
"619370": 38,
"627523": 39,
"628801": 40,
"629136": 41,
"629319": 42,
"630310": 43,
"639251": 44,
"639303": 45,
"642077": 46,
"642795": 47,
"650935": 48,
"651376": 49
},
"label": {
"525467": "Vuosi 2020 Viikko 52",
"525455": "Vuosi 2020 Viikko 53",
"525460": "Vuosi 2021 Viikko 01",
"525438": "Vuosi 2021 Viikko 02",
"525454": "Vuosi 2021 Viikko 03",
"525462": "Vuosi 2021 Viikko 04",
"525441": "Vuosi 2021 Viikko 05",
"527848": "Vuosi 2021 Viikko 06",
"531437": "Vuosi 2021 Viikko 07",
"533036": "Vuosi 2021 Viikko 08",
"533161": "Vuosi 2021 Viikko 09",
"533828": "Vuosi 2021 Viikko 10",
"533893": "Vuosi 2021 Viikko 11",
"537676": "Vuosi 2021 Viikko 12",
"539117": "Vuosi 2021 Viikko 13",
"547307": "Vuosi 2021 Viikko 14",
"547361": "Vuosi 2021 Viikko 15",
"547509": "Vuosi 2021 Viikko 16",
"547559": "Vuosi 2021 Viikko 17",
"566011": "Vuosi 2021 Viikko 18",
"567632": "Vuosi 2021 Viikko 19",
"568219": "Vuosi 2021 Viikko 20",
"580342": "Vuosi 2021 Viikko 21",
"580442": "Vuosi 2021 Viikko 22",
"581008": "Vuosi 2021 Viikko 23",
"581100": "Vuosi 2021 Viikko 24",
"590261": "Vuosi 2021 Viikko 25",
"600765": "Vuosi 2021 Viikko 26",
"601510": "Vuosi 2021 Viikko 27",
"601865": "Vuosi 2021 Viikko 28",
"601960": "Vuosi 2021 Viikko 29",
"601981": "Vuosi 2021 Viikko 30",
"602272": "Vuosi 2021 Viikko 31",
"602655": "Vuosi 2021 Viikko 32",
"610782": "Vuosi 2021 Viikko 33",
"610832": "Vuosi 2021 Viikko 34",
"617752": "Vuosi 2021 Viikko 35",
"618236": "Vuosi 2021 Viikko 36",
"619370": "Vuosi 2021 Viikko 37",
"627523": "Vuosi 2021 Viikko 38",
"628801": "Vuosi 2021 Viikko 39",
"629136": "Vuosi 2021 Viikko 40",
"629319": "Vuosi 2021 Viikko 41",
"630310": "Vuosi 2021 Viikko 42",
"639251": "Vuosi 2021 Viikko 43",
"639303": "Vuosi 2021 Viikko 44",
"642077": "Vuosi 2021 Viikko 45",
"642795": "Vuosi 2021 Viikko 46",
"650935": "Vuosi 2021 Viikko 47",
"651376": "Vuosi 2021 Viikko 48"
}
}
},
"cov_vac_age" : {
"category": {
"index": {
"518413": 0
},
"label": {
"518413": "Kaikki iät"
}
}
}
},
"value": {
"0": "67",
"1": "5799",
"2": "15569",
"3": "40678",
"4": "53138",
"5": "41728",
"6": "22270",
"7": "39382",
"8": "78135",
"9": "94425",
"10": "110654",
"11": "123307",
"12": "126359",
"13": "109495",
"14": "132354",
"15": "167257",
"16": "204299",
"17": "191495",
"18": "196903",
"19": "205874",
"20": "164954",
"21": "181095",
"22": "163880",
"23": "178011",
"24": "220082",
"25": "226026",
"26": "135435",
"27": "151741",
"28": "108634",
"29": "84110",
"30": "66519",
"31": "65224",
"32": "65138",
"33": "90317",
"34": "96406",
"35": "64531",
"36": "37011",
"37": "26304",
"38": "22959",
"39": "20697",
"40": "18009",
"41": "18322",
"42": "23355",
"43": "23248",
"44": "21388",
"45": "15260",
"46": "13143",
"47": "13957",
"48": "12711",
"49": "5123",
"50": "0",
"51": "0",
"52": "0",
"53": "5",
"54": "4956",
"55": "14718",
"56": "33336",
"57": "16882",
"58": "6520",
"59": "8592",
"60": "3268",
"61": "916",
"62": "1209",
"63": "1010",
"64": "1310",
"65": "6529",
"66": "30724",
"67": "30249",
"68": "17551",
"69": "38953",
"70": "71933",
"71": "95781",
"72": "109976",
"73": "121972",
"74": "125096",
"75": "118994",
"76": "127026",
"77": "174322",
"78": "205552",
"79": "185631",
"80": "206158",
"81": "208873",
"82": "199483",
"83": "215688",
"84": "206681",
"85": "190175",
"86": "198763",
"87": "177172",
"88": "122938",
"89": "124998",
"90": "120857",
"91": "103189",
"92": "97103",
"93": "78720",
"94": "81757",
"95": "54240",
"96": "38404",
"97": "27752",
"98": "23006",
"99": "8369",
"100": "0",
"101": "0",
"102": "0",
"103": "0",
"104": "0",
"105": "0",
"106": "0",
"107": "0",
"108": "0",
"109": "0",
"110": "0",
"111": "0",
"112": "0",
"113": "0",
"114": "0",
"115": "0",
"116": "0",
"117": "0",
"118": "0",
"119": "0",
"120": "0",
"121": "0",
"122": "0",
"123": "0",
"124": "0",
"125": "0",
"126": "0",
"127": "0",
"128": "0",
"129": "0",
"130": "0",
"131": "0",
"132": "0",
"133": "0",
"134": "0",
"135": "0",
"136": "0",
"137": "0",
"138": "1207",
"139": "14865",
"140": "20114",
"141": "17558",
"142": "14912",
"143": "10184",
"144": "13601",
"145": "18207",
"146": "34628",
"147": "54777",
"148": "63612",
"149": "31538"
}
}
}

class RESTAPIConnector(Connector):
    """Fetches JSON data from a REST API"""

    def __init__(self, uri: str, **kwargs) -> None:
        """Stores information for fetching data from the API.

        Args:
            uri (str): REST API's address.
        """

        super().__init__(uri)
        self._config = kwargs

    def _resolve_path(self, path, data):
        if len(path) == 1:
            return data[path[0]]
        else:
            return self._resolve_path(path[1:], data[path[0]])
    
    def get_data(self, endpoint: str, fields: dict, timespan: int) -> dict:
        """Fetches data from the REST API.

        Args:
            endpoint (str): Endpoint appended to the address.
            fields (dict): Names of the columns (e.g. timestamp, measurement, sensor_name).

        Returns:
            dict: Data in a format suitable for matplotlib.
        """

        start_time = self._get_start_time(timespan)
        self._uri = 'https://sampo.thl.fi/pivot/prod/fi/vaccreg/cov19cov/fact_cov19cov?row=cov_vac_dose-533170.533164.639082.&column=dateweek20201226-525467.525455.525460.525438.525454.525462.525441.527848.531437.533036.533161.533828.533893.537676.539117.547307.547361.547509.547559.566011.567632.568219.580342.580442.581008.581100.590261.600765.601510.601865.601960.601981.602272.602655.610782.610832.617752.618236.619370.627523.628801.629136.629319.630310.639251.639303.642077.642795.650935.651376.'
        #self._uri = 'https://sampo.thl.fi/pivot/prod/fi/vaccreg/cov19cov/fact_cov19cov.json?row=cov_vac_dose-533170.533164.639082.&row=measure-533175.&column=dateweek20201226-525467.525455.525460.525438.525454.525462.525441.527848.531437.533036.533161.533828.533893.537676.539117.547307.547361.547509.547559.566011.567632.568219.580342.580442.581008.581100.590261.600765.601510.601865.601960.601981.602272.602655.610782.610832.617752.618236.619370.627523.628801.629136.629319.630310.639251.639303.642077.642795.650935.651376.&column=cov_vac_age-518413.'

        #path1 = ['dataset', 'dimension']
        path1 = ['dataset', 'dimension', 'cov_vac_dose']
        #path1 = ['dataset', 'dimension', 'size']
        #path1 = ['dataset', 'value']
        data = self._resolve_path(path1, jsn)
        #data = requests.get(url=self._uri, headers={"content-type":"text"})
        print(data)

        #if timespan is None:
        #    cur.execute(f'SELECT {fields["time"]}, {fields["value"]}, {fields["name"]} FROM {collname}')
        #else:
        #    cur.execute(f'SELECT {fields["time"]}, {fields["value"]}, {fields["name"]} FROM {collname} WHERE {fields["time"]} > {start_time}')

        #data = [{fields['time']: row[0], 'value': row[1], 'name': row[2]} for row in result]
        #return self._transform(data)
        return #plots = {row['name']:([time],[value]) for row in data}
